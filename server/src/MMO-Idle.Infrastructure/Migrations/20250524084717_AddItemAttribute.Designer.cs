// <auto-generated />
using System;
using System.Text.Json;
using MMOIdle.Domain.Enums;
using MMOIdle.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MMOIdle.Infrastructure.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20250524084717_AddItemAttribute")]
    partial class AddItemAttribute
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "equipment_slot", new[] { "accessory1", "accessory2", "back", "chest", "chisel", "cookware", "feet", "fishing_rod", "hammer", "hands", "head", "hoe", "knife", "legs", "main_hand", "neck", "needle_and_thread", "off_hand", "pickaxe", "ring1", "ring2", "shoulder", "shovel", "sickle", "waist", "wrist" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "item_category", new[] { "chest", "currency", "feet", "hammer", "hands", "head", "legs", "one_handed_sword", "ore", "pickaxe", "shield", "shoulder", "waist", "wrist" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "item_quality", new[] { "blue", "gray", "green", "normal", "orange", "purple", "rainbow", "red", "white" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "item_type", new[] { "consumable", "currency", "equipment", "material", "other" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "life_skill_type", new[] { "alchemy", "blacksmithing", "cooking", "crafting", "farming", "fishing", "gathering", "hunting", "mining", "tailoring" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MMOIdle.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("ix_accounts_user_name");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("MMOIdle.Domain.Entities.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<int>("Class")
                        .HasColumnType("integer")
                        .HasColumnName("class");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Experience")
                        .HasColumnType("integer")
                        .HasColumnName("experience");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_characters");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_characters_account_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_characters_name");

                    b.ToTable("characters", (string)null);
                });

            modelBuilder.Entity("MMOIdle.Domain.Entities.CharacterBackpack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid")
                        .HasColumnName("character_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_character_backpacks");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("ix_character_backpacks_character_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_character_backpacks_item_id");

                    b.ToTable("character_backpacks", (string)null);
                });

            modelBuilder.Entity("MMOIdle.Domain.Entities.CharacterEquipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid")
                        .HasColumnName("character_id");

                    b.Property<DateTime>("EquippedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("equipped_at");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<EquipmentSlot>("Slot")
                        .HasColumnType("equipment_slot")
                        .HasColumnName("slot");

                    b.HasKey("Id")
                        .HasName("pk_character_equipments");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("ix_character_equipments_character_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_character_equipments_item_id");

                    b.ToTable("character_equipments", (string)null);
                });

            modelBuilder.Entity("MMOIdle.Domain.Entities.CharacterSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid")
                        .HasColumnName("character_id");

                    b.Property<int>("Experience")
                        .HasColumnType("integer")
                        .HasColumnName("experience");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<LifeSkillType>("SkillType")
                        .HasColumnType("life_skill_type")
                        .HasColumnName("skill_type");

                    b.HasKey("Id")
                        .HasName("pk_character_skills");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("ix_character_skills_character_id");

                    b.ToTable("character_skills", (string)null);
                });

            modelBuilder.Entity("MMOIdle.Domain.Entities.GameItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<JsonDocument>("Attributes")
                        .HasColumnType("jsonb")
                        .HasColumnName("attributes");

                    b.Property<ItemCategory>("Category")
                        .HasColumnType("item_category")
                        .HasColumnName("category");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<ItemQuality>("Quality")
                        .HasColumnType("item_quality")
                        .HasColumnName("quality");

                    b.Property<int>("SellPrice")
                        .HasColumnType("integer")
                        .HasColumnName("sell_price");

                    b.Property<ItemType>("Type")
                        .HasColumnType("item_type")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_game_items");

                    b.ToTable("game_items", (string)null);
                });

            modelBuilder.Entity("MMOIdle.Domain.Entities.SkillLevelRequirement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int>("RequiredExperience")
                        .HasColumnType("integer")
                        .HasColumnName("required_experience");

                    b.Property<LifeSkillType?>("SkillType")
                        .HasColumnType("life_skill_type")
                        .HasColumnName("skill_type");

                    b.HasKey("Id")
                        .HasName("pk_skill_level_requirements");

                    b.ToTable("skill_level_requirements", (string)null);
                });

            modelBuilder.Entity("MMOIdle.Domain.Entities.Character", b =>
                {
                    b.HasOne("MMOIdle.Domain.Entities.Account", "Account")
                        .WithMany("Characters")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_characters_accounts_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MMOIdle.Domain.Entities.CharacterBackpack", b =>
                {
                    b.HasOne("MMOIdle.Domain.Entities.Character", "Character")
                        .WithMany("CharacterBackpacks")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_character_backpacks_characters_character_id");

                    b.HasOne("MMOIdle.Domain.Entities.GameItem", "GameItem")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_character_backpacks_game_items_item_id");

                    b.Navigation("Character");

                    b.Navigation("GameItem");
                });

            modelBuilder.Entity("MMOIdle.Domain.Entities.CharacterEquipment", b =>
                {
                    b.HasOne("MMOIdle.Domain.Entities.Character", "Character")
                        .WithMany("CharacterEquipments")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_character_equipments_characters_character_id");

                    b.HasOne("MMOIdle.Domain.Entities.GameItem", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_character_equipments_game_items_item_id");

                    b.Navigation("Character");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("MMOIdle.Domain.Entities.CharacterSkill", b =>
                {
                    b.HasOne("MMOIdle.Domain.Entities.Character", "Character")
                        .WithMany("CharacterSkills")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_character_skills_characters_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("MMOIdle.Domain.Entities.Account", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("MMOIdle.Domain.Entities.Character", b =>
                {
                    b.Navigation("CharacterBackpacks");

                    b.Navigation("CharacterEquipments");

                    b.Navigation("CharacterSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
